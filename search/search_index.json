{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>            </p>   <p>notion-sdk-py is a simple and easy to use client library for the official Notion API.</p> <p>It is meant to be a Python version of the reference JavaScript SDK, so usage should be pretty similar between both. \ud83d\ude0a</p>  <p>\ud83d\udce2 Announcement (10-12-2022) \u2014 Release 2.0.0 is out! It mostly adds new helpers, support for the comments API, more tests, and Python 3.11.</p> <p>Beware, <code>Notion-Version</code> has been upgraded to <code>2022-06-28</code> and it brings breaking changes.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install notion-client\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Before getting started, create an integration and find the token. \u2192 Learn more about authorization.</p>  <p>Import and initialize a client using an integration token or an OAuth access token.</p> <pre><code>import os\nfrom notion_client import Client\n\nnotion = Client(auth=os.environ[\"NOTION_TOKEN\"])\n</code></pre> <p>In an asyncio environment, use the asynchronous client instead:</p> <pre><code>from notion_client import AsyncClient\n\nnotion = AsyncClient(auth=os.environ[\"NOTION_TOKEN\"])\n</code></pre> <p>Make a request to any Notion API endpoint.</p>  <p>See the complete list of endpoints in the API reference.</p>  <pre><code>from pprint import pprint\n\nlist_users_response = notion.users.list()\npprint(list_users_response)\n</code></pre> <p>or with the asynchronous client:</p> <pre><code>list_users_response = await notion.users.list()\npprint(list_users_response)\n</code></pre> <p>This would output something like:</p> <pre><code>{'results': [{'avatar_url': 'https://secure.notion-static.com/e6a352a8-8381-44d0-a1dc-9ed80e62b53d.jpg',\n              'id': 'd40e767c-d7af-4b18-a86d-55c61f1e39a4',\n              'name': 'Avocado Lovelace',\n              'object': 'user',\n              'person': {'email': 'avo@example.org'},\n              'type': 'person'},\n             ...]}\n</code></pre> <p>All API endpoints are available in both the synchronous and asynchronous clients.</p> <p>Endpoint parameters are grouped into a single object. You don't need to remember which parameters go in the path, query, or body.</p> <pre><code>my_page = notion.databases.query(\n    **{\n        \"database_id\": \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n        \"filter\": {\n            \"property\": \"Landmark\",\n            \"rich_text\": {\n                \"contains\": \"Bridge\",\n            },\n        },\n    }\n)\n</code></pre>"},{"location":"#handling-errors","title":"Handling errors","text":"<p>If the API returns an unsuccessful response, an <code>APIResponseError</code> will be raised.</p> <p>The error contains properties from the response, and the most helpful is <code>code</code>. You can compare <code>code</code> to the values in the <code>APIErrorCode</code> object to avoid misspelling error codes.</p> <pre><code>import logging\nfrom notion_client import APIErrorCode, APIResponseError\n\ntry:\n    my_page = notion.databases.query(\n        **{\n            \"database_id\": \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n            \"filter\": {\n                \"property\": \"Landmark\",\n                \"rich_text\": {\n                    \"contains\": \"Bridge\",\n                },\n            },\n        }\n    )\nexcept APIResponseError as error:\n    if error.code == APIErrorCode.ObjectNotFound:\n        ...  # For example: handle by asking the user to select a different database\n    else:\n        # Other error handling code\n        logging.error(error)\n</code></pre>"},{"location":"#logging","title":"Logging","text":"<p>The client emits useful information to a logger. By default, it only emits warnings and errors.</p> <p>If you're debugging an application, and would like the client to log request &amp; response bodies, set the <code>log_level</code> option to <code>logging.DEBUG</code>.</p> <pre><code>notion = Client(\n    auth=os.environ[\"NOTION_TOKEN\"],\n    log_level=logging.DEBUG,\n)\n</code></pre> <p>You may also set a custom <code>logger</code> to emit logs to a destination other than <code>stdout</code>. Have a look at Python's logging cookbook if you want to create your own logger.</p>"},{"location":"#client-options","title":"Client options","text":"<p><code>Client</code> and <code>AsyncClient</code> both support the following options on initialization. These options are all keys in the single constructor parameter.</p>     Option Default value Type Description     <code>auth</code> <code>None</code> <code>string</code> Bearer token for authentication. If left undefined, the <code>auth</code> parameter should be set on each request.   <code>log_level</code> <code>logging.WARNING</code> <code>int</code> Verbosity of logs the instance will produce. By default, logs are written to <code>stdout</code>.   <code>timeout_ms</code> <code>60_000</code> <code>int</code> Number of milliseconds to wait before emitting a <code>RequestTimeoutError</code>   <code>base_url</code> <code>\"https://api.notion.com\"</code> <code>string</code> The root URL for sending API requests. This can be changed to test with a mock server.   <code>logger</code> Log to console <code>logging.Logger</code> A custom logger."},{"location":"#full-api-responses","title":"Full API responses","text":"<p>The following functions can distinguish between full and partial API responses.</p>    Function Purpose     <code>is_full_page</code> Determine whether an object is a full Page object   <code>is_full_block</code> Determine whether an object is a full Block object   <code>is_full_database</code> Determine whether an object is a full Database object   <code>is_full_user</code> Determine whether an object is a full User object   <code>is_full_comment</code> Determine whether an object is a full Comment object     <pre><code>from notion_client.helpers import is_full_page\n\nfull_or_partial_pages = await notion.databases.query(\n    database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n)\n\nfor page in full_or_partial_pages[\"results\"]:\n    if not is_full_page(page):\n        continue\n    print(f\"Created at: {page['created_time']}\")\n</code></pre>"},{"location":"#utility-functions","title":"Utility functions","text":"<p>These functions can be helpful for dealing with any of the paginated APIs.</p> <p><code>iterate_paginated_api(function, **kwargs)</code> and its async version <code>async_iterate_paginated_api(function, **kwargs)</code> turn any paginated API into a generator.</p> <p>The <code>function</code> parameter must accept a <code>start_cursor</code> argument. Example: <code>notion.blocks.children.list</code>.</p> <pre><code>from notion_client.helpers import iterate_paginated_api\n\nfor block in iterate_paginated_api(\n    notion.databases.query, database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n):\n    # Do something with block.\n    ...\n</code></pre> <p>If you don't need a generator, <code>collect_paginated_api(function, **kwargs)</code> and its async version <code>async_collect_paginated_api(function, **kwargs)</code> have the same behavior than the previous functions, but return a list of all results from the paginated API.</p> <pre><code>from notion_client.helpers import collect_paginated_api\n\nall_results = collect_paginated_api(\n    notion.databases.query, database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n)\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Run the tests with the <code>pytest</code> command: the tests are using pytest-vcr's cassettes for simulating requests to the Notion API.</p> <p>To create new tests or run them without cassettes, you need to set up the environment variables <code>NOTION_TOKEN</code> and <code>NOTION_TEST_PAGE_ID</code> (a page where your integration has all the capabilities enabled).</p> <p>The code will use the page at <code>NOTION_TEST_PAGE_ID</code> to generate a temporary environment with the Notion objects to be tested, which will be deleted at the end of the session.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>This package supports the following minimum versions:</p> <ul> <li>Python &gt;= 3.7</li> <li>httpx &gt;= 0.15.0</li> </ul> <p>Earlier versions may still work, but we encourage people building new applications to upgrade to the current stable.</p>"},{"location":"#getting-help","title":"Getting help","text":"<p>If you have a question about the library, or are having difficulty using it, chat with the community in GitHub Discussions.</p> <p>If you're experiencing issues with the Notion API, such as a service interruption or a potential bug in the platform, reach out to Notion help.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home<ul> <li>Overview</li> <li>Quick Start</li> <li>License</li> </ul> </li> <li>Reference<ul> <li>Client</li> <li>API Endpoints</li> <li>Errors</li> <li>Helpers</li> </ul> </li> <li>Development<ul> <li>Coverage Report</li> <li>Contributing Guidelines</li> </ul> </li> </ul>"},{"location":"license/","title":"License","text":"<pre><code>The MIT License (MIT)\n\nCopyright (c) 2021 Guillaume Gelin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"quick_start/","title":"Quick Start","text":"<p>Get started with notion-sdk-py in just 5 minutes!</p>"},{"location":"quick_start/#setup","title":"Setup","text":""},{"location":"quick_start/#pre-requisites","title":"Pre requisites","text":"<ul> <li> <p>Make sure you have <code>python</code> and <code>pip</code> properly installed in your system.</p> <pre><code>python --version\npip --version\n</code></pre> </li> <li> <p>Create a new directory and move into it to follow along with this tutorial.</p> <pre><code>mkdir learn-notion-sdk-py &amp;&amp; cd learn-notion-sdk-py\n</code></pre> </li> </ul>"},{"location":"quick_start/#installation","title":"Installation","text":"<ul> <li> <p>Create a virtual environment and activate it.</p> <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\n</code></pre> </li> <li> <p>Install <code>notion-sdk-py</code> using <code>pip</code></p> <pre><code>pip install --upgrade notion-client\n</code></pre> </li> </ul>"},{"location":"quick_start/#create-integration","title":"Create integration","text":"<ul> <li> <p>Go to notion.so/my-integrations to create an integration. Copy the token given by Notion.</p> </li> <li> <p>Make it available in your environment:</p> <pre><code>export NOTION_TOKEN=secret_abcd12345\n</code></pre> </li> </ul>  <p>Tip</p> <p>Don't forget that <code>export</code> only puts the variable in the environment of the current shell. If you don't want to redo this step for every new shell, add the line in your shell configuration or use a configuration library like dotenv.</p>"},{"location":"quick_start/#play","title":"Play","text":"<p>Copy paste the code, and have fun tweaking it.</p>"},{"location":"quick_start/#initialize-the-notion-client","title":"Initialize the notion client","text":"<pre><code>from pprint import pprint\nfrom notion_client import Client\nimport settings\n\nnotion = Client(auth=settings.NOTION_TOKEN)\n</code></pre>"},{"location":"quick_start/#get-all-users","title":"Get all users","text":"<p>Let us fetch the list of users in the scope of our integration.</p> <pre><code>users = notion.users.list()\n# print(users)\n\nfor user in users.get(\"results\"):\n    name, user_type = user[\"name\"], user[\"type\"]\n    is_bot = user[\"type\"] == \"bot\"\n    print(f\"{name} is a {user_type} {'\ud83d\ude05' if is_bot else '\ud83d\ude4b\u200d\u2642\ufe0f'}\")\n</code></pre> <p>This would output something in the lines of</p> <pre><code>Aahnik Daw is a person \ud83d\ude4b\u200d\u2642\ufe0f\nTestInti is a bot \ud83d\ude05\n</code></pre> <p>Do you see your name and the name of your integration?</p> <p>\ud83c\udf89 Congratulations, you are now ready to use notion-sdk-py!</p>"},{"location":"quick_start/#whats-next","title":"Whats next ?","text":"<p>With the simplicity of python and flexibility of Notion, you can connect Notion pages and databases to the tools you use every day, creating powerful workflows.</p> <p>These resources should help you along the way:</p> <ul> <li>Examples Curated examples that are designed to make you learn.</li> <li>Reference Full reference of all public classes and methods.</li> <li>Projects Compilation of open source projects that are using this library.</li> <li>Discussions What people are discussing about notion-sdk-py.</li> </ul>"},{"location":"contributing/contributing/","title":"Contributing Guidelines","text":"<p>If you are a first time contributor, start by reading this fantastic guide.</p> <ol> <li> <p>Read the docs</p> <ul> <li>notion-sdk-py</li> <li>Notion API Reference</li> <li>httpx</li> </ul> </li> <li> <p>System Requirements</p> <ul> <li>git</li> <li>python</li> <li>pip</li> </ul> </li> <li> <p>Fork the repository and clone it. Checkout a new feature branch from <code>main</code>. This guide will be really helpful if you are a newbie.</p> </li> <li> <p>Install dependencies inside a virtual environment.</p> <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -r requirements/dev.txt\n</code></pre> </li> <li> <p>Install pre-commit hooks.</p> <pre><code>pre-commit install\n</code></pre> </li> <li> <p>Follow the code style enforced by tools such as black, isort, flake, mypy. For markdown files, markdownlint must be followed.</p> </li> <li> <p>Tests must pass. If you are adding features write tests.</p> </li> </ol>"},{"location":"reference/api_endpoints/","title":"API Endpoints","text":""},{"location":"reference/api_endpoints/#notion_client.api_endpoints","title":"<code>notion_client.api_endpoints</code>","text":"<p>Notion API endpoints.</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksChildrenEndpoint","title":"<code>BlocksChildrenEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksChildrenEndpoint.append","title":"<code>append(block_id, **kwargs)</code>","text":"<p>Create and append new children blocks to the block using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksChildrenEndpoint.list","title":"<code>list(block_id, **kwargs)</code>","text":"<p>Return a paginated array of child block objects contained in the block.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint","title":"<code>BlocksEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint.delete","title":"<code>delete(block_id, **kwargs)</code>","text":"<p>Set a Block object, including page blocks, to <code>archived: true</code>.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint.retrieve","title":"<code>retrieve(block_id, **kwargs)</code>","text":"<p>Retrieve a Block object using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.BlocksEndpoint.update","title":"<code>update(block_id, **kwargs)</code>","text":"<p>Update the content for the specified <code>block_id</code> based on the block type.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.CommentsEndpoint","title":"<code>CommentsEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.CommentsEndpoint.create","title":"<code>create(**kwargs)</code>","text":"<p>Create a new comment in the specified page or existing discussion thread.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.CommentsEndpoint.list","title":"<code>list(**kwargs)</code>","text":"<p>Retrieve a list of un-resolved Comment objects from the specified block.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint","title":"<code>DatabasesEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.create","title":"<code>create(**kwargs)</code>","text":"<p>Create a database as a subpage in the specified parent page.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.list","title":"<code>list(**kwargs)</code>","text":"<p>List all Databases shared with the authenticated integration.</p>  <p>\u26a0\ufe0f  Deprecated endpoint</p>  <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.query","title":"<code>query(database_id, **kwargs)</code>","text":"<p>Get a list of Pages contained in the database.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.retrieve","title":"<code>retrieve(database_id, **kwargs)</code>","text":"<p>Retrieve a Database object using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.DatabasesEndpoint.update","title":"<code>update(database_id, **kwargs)</code>","text":"<p>Update an existing database as specified by the parameters.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint","title":"<code>PagesEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint.create","title":"<code>create(**kwargs)</code>","text":"<p>Create a new page in the specified database or as a child of an existing page.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint.retrieve","title":"<code>retrieve(page_id, **kwargs)</code>","text":"<p>Retrieve a Page object using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesEndpoint.update","title":"<code>update(page_id, **kwargs)</code>","text":"<p>Update page property values for the specified page.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesPropertiesEndpoint","title":"<code>PagesPropertiesEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.PagesPropertiesEndpoint.retrieve","title":"<code>retrieve(page_id, property_id, **kwargs)</code>","text":"<p>Retrieve a <code>property_item</code> object for a given <code>page_id</code> and <code>property_id</code>.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.SearchEndpoint","title":"<code>SearchEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.SearchEndpoint.__call__","title":"<code>__call__(**kwargs)</code>","text":"<p>Search all pages and child pages that are shared with the integration.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint","title":"<code>UsersEndpoint</code>","text":"<p>         Bases: <code>Endpoint</code></p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint.list","title":"<code>list(**kwargs)</code>","text":"<p>Return a paginated list of Users for the workspace.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint.me","title":"<code>me(**kwargs)</code>","text":"<p>Retrieve the bot User associated with the API token.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/api_endpoints/#notion_client.api_endpoints.UsersEndpoint.retrieve","title":"<code>retrieve(user_id, **kwargs)</code>","text":"<p>Retrieve a User using the ID specified.</p> <p>\ud83d\udd17 Endpoint documentation</p>"},{"location":"reference/client/","title":"Client","text":""},{"location":"reference/client/#notion_client.client","title":"<code>notion_client.client</code>","text":"<p>Synchronous and asynchronous clients for Notion's API.</p>"},{"location":"reference/client/#notion_client.client.AsyncClient","title":"<code>AsyncClient</code>","text":"<p>         Bases: <code>BaseClient</code></p> <p>Asynchronous client for Notion's API.</p>"},{"location":"reference/client/#notion_client.client.AsyncClient.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>Close the connection pool of the current inner client.</p>"},{"location":"reference/client/#notion_client.client.AsyncClient.request","title":"<code>request(path, method, query=None, body=None, auth=None)</code>  <code>async</code>","text":"<p>Send an HTTP request asynchronously.</p>"},{"location":"reference/client/#notion_client.client.Client","title":"<code>Client</code>","text":"<p>         Bases: <code>BaseClient</code></p> <p>Synchronous client for Notion's API.</p>"},{"location":"reference/client/#notion_client.client.Client.close","title":"<code>close()</code>","text":"<p>Close the connection pool of the current inner client.</p>"},{"location":"reference/client/#notion_client.client.Client.request","title":"<code>request(path, method, query=None, body=None, auth=None)</code>","text":"<p>Send an HTTP request.</p>"},{"location":"reference/client/#notion_client.client.ClientOptions","title":"<code>ClientOptions</code>  <code>dataclass</code>","text":"<p>Options to configure the client.</p> <p>Attributes:</p>    Name Type Description     <code>auth</code>  <code>Optional[str]</code>  <p>Bearer token for authentication. If left undefined, the <code>auth</code> parameter should be set on each request.</p>   <code>timeout_ms</code>  <code>int</code>  <p>Number of milliseconds to wait before emitting a <code>RequestTimeoutError</code>.</p>   <code>base_url</code>  <code>str</code>  <p>The root URL for sending API requests. This can be changed to test with a mock server.</p>   <code>log_level</code>  <code>int</code>  <p>Verbosity of logs the instance will produce. By default, logs are written to <code>stdout</code>.</p>   <code>logger</code>  <code>Optional[logging.Logger]</code>  <p>A custom logger.</p>   <code>notion_version</code>  <code>str</code>  <p>Notion version to use.</p>"},{"location":"reference/errors/","title":"Errors","text":""},{"location":"reference/errors/#notion_client.errors","title":"<code>notion_client.errors</code>","text":"<p>Custom exceptions for notion-sdk-py.</p> <p>This module defines the exceptions that can be raised when an error occurs.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode","title":"<code>APIErrorCode</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ConflictError","title":"<code>ConflictError = 'conflict_error'</code>  <code>class-attribute</code>","text":"<p>The transaction could not be completed, potentially due to a data collision. Make sure the parameters are up to date and try again.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InternalServerError","title":"<code>InternalServerError = 'internal_server_error'</code>  <code>class-attribute</code>","text":"<p>An unexpected error occurred. Reach out to Notion support.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InvalidJSON","title":"<code>InvalidJSON = 'invalid_json'</code>  <code>class-attribute</code>","text":"<p>The request body could not be decoded as JSON.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InvalidRequest","title":"<code>InvalidRequest = 'invalid_request'</code>  <code>class-attribute</code>","text":"<p>This request is not supported.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.InvalidRequestURL","title":"<code>InvalidRequestURL = 'invalid_request_url'</code>  <code>class-attribute</code>","text":"<p>The request URL is not valid.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ObjectNotFound","title":"<code>ObjectNotFound = 'object_not_found'</code>  <code>class-attribute</code>","text":"<p>Given the bearer token used, the resource does not exist. This error can also indicate that the resource has not been shared with owner of the bearer token.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.RateLimited","title":"<code>RateLimited = 'rate_limited'</code>  <code>class-attribute</code>","text":"<p>This request exceeds the number of requests allowed. Slow down and try again.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.RestrictedResource","title":"<code>RestrictedResource = 'restricted_resource'</code>  <code>class-attribute</code>","text":"<p>Given the bearer token used, the client doesn't have permission to perform this operation.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ServiceUnavailable","title":"<code>ServiceUnavailable = 'service_unavailable'</code>  <code>class-attribute</code>","text":"<p>Notion is unavailable. Try again later. This can occur when the time to respond to a request takes longer than 60 seconds, the maximum request timeout.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.Unauthorized","title":"<code>Unauthorized = 'unauthorized'</code>  <code>class-attribute</code>","text":"<p>The bearer token is not valid.</p>"},{"location":"reference/errors/#notion_client.errors.APIErrorCode.ValidationError","title":"<code>ValidationError = 'validation_error'</code>  <code>class-attribute</code>","text":"<p>The request body does not match the schema for the expected parameters.</p>"},{"location":"reference/errors/#notion_client.errors.APIResponseError","title":"<code>APIResponseError</code>","text":"<p>         Bases: <code>HTTPResponseError</code></p> <p>An error raised by Notion API.</p>"},{"location":"reference/errors/#notion_client.errors.HTTPResponseError","title":"<code>HTTPResponseError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Exception for HTTP errors.</p> <p>Responses from the API use HTTP response codes that are used to indicate general classes of success and error.</p>"},{"location":"reference/errors/#notion_client.errors.RequestTimeoutError","title":"<code>RequestTimeoutError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Exception for requests that timeout.</p> <p>The request that we made waits for a specified period of time or maximum number of retries to get the response. But if no response comes within the limited time or retries, then this Exception is raised.</p>"},{"location":"reference/errors/#notion_client.errors.is_api_error_code","title":"<code>is_api_error_code(code)</code>","text":"<p>Check if given code belongs to the list of valid API error codes.</p>"},{"location":"reference/helpers/","title":"Helpers","text":""},{"location":"reference/helpers/#notion_client.helpers","title":"<code>notion_client.helpers</code>","text":"<p>Utility functions for notion-sdk-py.</p>"},{"location":"reference/helpers/#notion_client.helpers.async_collect_paginated_api","title":"<code>async_collect_paginated_api(function, **kwargs)</code>  <code>async</code>","text":"<p>Collect asynchronously all the results of paginating an API into a list.</p>"},{"location":"reference/helpers/#notion_client.helpers.async_iterate_paginated_api","title":"<code>async_iterate_paginated_api(function, **kwargs)</code>  <code>async</code>","text":"<p>Return an async iterator over the results of any paginated Notion API.</p>"},{"location":"reference/helpers/#notion_client.helpers.collect_paginated_api","title":"<code>collect_paginated_api(function, **kwargs)</code>","text":"<p>Collect all the results of paginating an API into a list.</p>"},{"location":"reference/helpers/#notion_client.helpers.get_id","title":"<code>get_id(url)</code>","text":"<p>Return the id of the object behind the given URL.</p>"},{"location":"reference/helpers/#notion_client.helpers.get_url","title":"<code>get_url(object_id)</code>","text":"<p>Return the URL for the object with the given id.</p>"},{"location":"reference/helpers/#notion_client.helpers.is_full_block","title":"<code>is_full_block(response)</code>","text":"<p>Return <code>true</code> if response is a full block.</p>"},{"location":"reference/helpers/#notion_client.helpers.is_full_comment","title":"<code>is_full_comment(response)</code>","text":"<p>Return <code>true</code> if response is a full comment.</p>"},{"location":"reference/helpers/#notion_client.helpers.is_full_database","title":"<code>is_full_database(response)</code>","text":"<p>Return <code>true</code> if response is a full database.</p>"},{"location":"reference/helpers/#notion_client.helpers.is_full_page","title":"<code>is_full_page(response)</code>","text":"<p>Return <code>true</code> if response is a full page.</p>"},{"location":"reference/helpers/#notion_client.helpers.is_full_user","title":"<code>is_full_user(response)</code>","text":"<p>Return <code>true</code> if response is a full user.</p>"},{"location":"reference/helpers/#notion_client.helpers.iterate_paginated_api","title":"<code>iterate_paginated_api(function, **kwargs)</code>","text":"<p>Return an iterator over the results of any paginated Notion API.</p>"},{"location":"reference/helpers/#notion_client.helpers.pick","title":"<code>pick(base, *keys)</code>","text":"<p>Return a dict composed of key value pairs for keys passed as args.</p>"},{"location":"coverage/","title":"Coverage Report","text":"<p>  </p>"}]}